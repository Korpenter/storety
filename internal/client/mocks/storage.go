// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/Mldlr/storety/internal/client/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

type Storage_Expecter struct {
	mock *mock.Mock
}

func (_m *Storage) EXPECT() *Storage_Expecter {
	return &Storage_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *Storage) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Storage_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Storage_Expecter) Close() *Storage_Close_Call {
	return &Storage_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Storage_Close_Call) Run(run func()) *Storage_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Storage_Close_Call) Return(_a0 error) *Storage_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_Close_Call) RunAndReturn(run func() error) *Storage_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CreateData provides a mock function with given fields: ctx, data
func (_m *Storage) CreateData(ctx context.Context, data *models.Data) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Data) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_CreateData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateData'
type Storage_CreateData_Call struct {
	*mock.Call
}

// CreateData is a helper method to define mock.On call
//   - ctx context.Context
//   - data *models.Data
func (_e *Storage_Expecter) CreateData(ctx interface{}, data interface{}) *Storage_CreateData_Call {
	return &Storage_CreateData_Call{Call: _e.mock.On("CreateData", ctx, data)}
}

func (_c *Storage_CreateData_Call) Run(run func(ctx context.Context, data *models.Data)) *Storage_CreateData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Data))
	})
	return _c
}

func (_c *Storage_CreateData_Call) Return(_a0 error) *Storage_CreateData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_CreateData_Call) RunAndReturn(run func(context.Context, *models.Data) error) *Storage_CreateData_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDataByName provides a mock function with given fields: ctx, name
func (_m *Storage) DeleteDataByName(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_DeleteDataByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDataByName'
type Storage_DeleteDataByName_Call struct {
	*mock.Call
}

// DeleteDataByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *Storage_Expecter) DeleteDataByName(ctx interface{}, name interface{}) *Storage_DeleteDataByName_Call {
	return &Storage_DeleteDataByName_Call{Call: _e.mock.On("DeleteDataByName", ctx, name)}
}

func (_c *Storage_DeleteDataByName_Call) Run(run func(ctx context.Context, name string)) *Storage_DeleteDataByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Storage_DeleteDataByName_Call) Return(_a0 error) *Storage_DeleteDataByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_DeleteDataByName_Call) RunAndReturn(run func(context.Context, string) error) *Storage_DeleteDataByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllDataInfo provides a mock function with given fields: ctx
func (_m *Storage) GetAllDataInfo(ctx context.Context) ([]models.DataInfo, error) {
	ret := _m.Called(ctx)

	var r0 []models.DataInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.DataInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.DataInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DataInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_GetAllDataInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllDataInfo'
type Storage_GetAllDataInfo_Call struct {
	*mock.Call
}

// GetAllDataInfo is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Storage_Expecter) GetAllDataInfo(ctx interface{}) *Storage_GetAllDataInfo_Call {
	return &Storage_GetAllDataInfo_Call{Call: _e.mock.On("GetAllDataInfo", ctx)}
}

func (_c *Storage_GetAllDataInfo_Call) Run(run func(ctx context.Context)) *Storage_GetAllDataInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Storage_GetAllDataInfo_Call) Return(_a0 []models.DataInfo, _a1 error) *Storage_GetAllDataInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_GetAllDataInfo_Call) RunAndReturn(run func(context.Context) ([]models.DataInfo, error)) *Storage_GetAllDataInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetBatch provides a mock function with given fields: ctx, ids
func (_m *Storage) GetBatch(ctx context.Context, ids []uuid.UUID) ([]models.Data, error) {
	ret := _m.Called(ctx, ids)

	var r0 []models.Data
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) ([]models.Data, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) []models.Data); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Data)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uuid.UUID) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_GetBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBatch'
type Storage_GetBatch_Call struct {
	*mock.Call
}

// GetBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []uuid.UUID
func (_e *Storage_Expecter) GetBatch(ctx interface{}, ids interface{}) *Storage_GetBatch_Call {
	return &Storage_GetBatch_Call{Call: _e.mock.On("GetBatch", ctx, ids)}
}

func (_c *Storage_GetBatch_Call) Run(run func(ctx context.Context, ids []uuid.UUID)) *Storage_GetBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID))
	})
	return _c
}

func (_c *Storage_GetBatch_Call) Return(_a0 []models.Data, _a1 error) *Storage_GetBatch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_GetBatch_Call) RunAndReturn(run func(context.Context, []uuid.UUID) ([]models.Data, error)) *Storage_GetBatch_Call {
	_c.Call.Return(run)
	return _c
}

// GetDataContentByName provides a mock function with given fields: ctx, name
func (_m *Storage) GetDataContentByName(ctx context.Context, name string) ([]byte, string, error) {
	ret := _m.Called(ctx, name)

	var r0 []byte
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]byte, string, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) string); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Storage_GetDataContentByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDataContentByName'
type Storage_GetDataContentByName_Call struct {
	*mock.Call
}

// GetDataContentByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *Storage_Expecter) GetDataContentByName(ctx interface{}, name interface{}) *Storage_GetDataContentByName_Call {
	return &Storage_GetDataContentByName_Call{Call: _e.mock.On("GetDataContentByName", ctx, name)}
}

func (_c *Storage_GetDataContentByName_Call) Run(run func(ctx context.Context, name string)) *Storage_GetDataContentByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Storage_GetDataContentByName_Call) Return(_a0 []byte, _a1 string, _a2 error) *Storage_GetDataContentByName_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *Storage_GetDataContentByName_Call) RunAndReturn(run func(context.Context, string) ([]byte, string, error)) *Storage_GetDataContentByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetNewData provides a mock function with given fields: ctx
func (_m *Storage) GetNewData(ctx context.Context) ([]models.Data, error) {
	ret := _m.Called(ctx)

	var r0 []models.Data
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Data, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Data); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Data)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_GetNewData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNewData'
type Storage_GetNewData_Call struct {
	*mock.Call
}

// GetNewData is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Storage_Expecter) GetNewData(ctx interface{}) *Storage_GetNewData_Call {
	return &Storage_GetNewData_Call{Call: _e.mock.On("GetNewData", ctx)}
}

func (_c *Storage_GetNewData_Call) Run(run func(ctx context.Context)) *Storage_GetNewData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Storage_GetNewData_Call) Return(_a0 []models.Data, _a1 error) *Storage_GetNewData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_GetNewData_Call) RunAndReturn(run func(context.Context) ([]models.Data, error)) *Storage_GetNewData_Call {
	_c.Call.Return(run)
	return _c
}

// GetSyncData provides a mock function with given fields: ctx
func (_m *Storage) GetSyncData(ctx context.Context) ([]models.SyncData, error) {
	ret := _m.Called(ctx)

	var r0 []models.SyncData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.SyncData, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.SyncData); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.SyncData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_GetSyncData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSyncData'
type Storage_GetSyncData_Call struct {
	*mock.Call
}

// GetSyncData is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Storage_Expecter) GetSyncData(ctx interface{}) *Storage_GetSyncData_Call {
	return &Storage_GetSyncData_Call{Call: _e.mock.On("GetSyncData", ctx)}
}

func (_c *Storage_GetSyncData_Call) Run(run func(ctx context.Context)) *Storage_GetSyncData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Storage_GetSyncData_Call) Return(_a0 []models.SyncData, _a1 error) *Storage_GetSyncData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_GetSyncData_Call) RunAndReturn(run func(context.Context) ([]models.SyncData, error)) *Storage_GetSyncData_Call {
	_c.Call.Return(run)
	return _c
}

// SetSyncedStatus provides a mock function with given fields: ctx, newData
func (_m *Storage) SetSyncedStatus(ctx context.Context, newData []models.Data) error {
	ret := _m.Called(ctx, newData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.Data) error); ok {
		r0 = rf(ctx, newData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_SetSyncedStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSyncedStatus'
type Storage_SetSyncedStatus_Call struct {
	*mock.Call
}

// SetSyncedStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - newData []models.Data
func (_e *Storage_Expecter) SetSyncedStatus(ctx interface{}, newData interface{}) *Storage_SetSyncedStatus_Call {
	return &Storage_SetSyncedStatus_Call{Call: _e.mock.On("SetSyncedStatus", ctx, newData)}
}

func (_c *Storage_SetSyncedStatus_Call) Run(run func(ctx context.Context, newData []models.Data)) *Storage_SetSyncedStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]models.Data))
	})
	return _c
}

func (_c *Storage_SetSyncedStatus_Call) Return(_a0 error) *Storage_SetSyncedStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_SetSyncedStatus_Call) RunAndReturn(run func(context.Context, []models.Data) error) *Storage_SetSyncedStatus_Call {
	_c.Call.Return(run)
	return _c
}

// SyncBatch provides a mock function with given fields: ctx, syncBatch
func (_m *Storage) SyncBatch(ctx context.Context, syncBatch []models.Data) error {
	ret := _m.Called(ctx, syncBatch)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.Data) error); ok {
		r0 = rf(ctx, syncBatch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_SyncBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncBatch'
type Storage_SyncBatch_Call struct {
	*mock.Call
}

// SyncBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - syncBatch []models.Data
func (_e *Storage_Expecter) SyncBatch(ctx interface{}, syncBatch interface{}) *Storage_SyncBatch_Call {
	return &Storage_SyncBatch_Call{Call: _e.mock.On("SyncBatch", ctx, syncBatch)}
}

func (_c *Storage_SyncBatch_Call) Run(run func(ctx context.Context, syncBatch []models.Data)) *Storage_SyncBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]models.Data))
	})
	return _c
}

func (_c *Storage_SyncBatch_Call) Return(_a0 error) *Storage_SyncBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_SyncBatch_Call) RunAndReturn(run func(context.Context, []models.Data) error) *Storage_SyncBatch_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStorage(t mockConstructorTestingTNewStorage) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
