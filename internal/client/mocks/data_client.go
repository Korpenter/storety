// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	proto "github.com/Mldlr/storety/internal/proto"
)

// DataClient is an autogenerated mock type for the DataClient type
type DataClient struct {
	mock.Mock
}

type DataClient_Expecter struct {
	mock *mock.Mock
}

func (_m *DataClient) EXPECT() *DataClient_Expecter {
	return &DataClient_Expecter{mock: &_m.Mock}
}

// CreateBatchData provides a mock function with given fields: ctx, in, opts
func (_m *DataClient) CreateBatchData(ctx context.Context, in *proto.CreateBatchDataRequest, opts ...grpc.CallOption) (*proto.CreateBatchResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.CreateBatchResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.CreateBatchDataRequest, ...grpc.CallOption) (*proto.CreateBatchResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.CreateBatchDataRequest, ...grpc.CallOption) *proto.CreateBatchResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateBatchResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.CreateBatchDataRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DataClient_CreateBatchData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBatchData'
type DataClient_CreateBatchData_Call struct {
	*mock.Call
}

// CreateBatchData is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.CreateBatchDataRequest
//   - opts ...grpc.CallOption
func (_e *DataClient_Expecter) CreateBatchData(ctx interface{}, in interface{}, opts ...interface{}) *DataClient_CreateBatchData_Call {
	return &DataClient_CreateBatchData_Call{Call: _e.mock.On("CreateBatchData",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *DataClient_CreateBatchData_Call) Run(run func(ctx context.Context, in *proto.CreateBatchDataRequest, opts ...grpc.CallOption)) *DataClient_CreateBatchData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.CreateBatchDataRequest), variadicArgs...)
	})
	return _c
}

func (_c *DataClient_CreateBatchData_Call) Return(_a0 *proto.CreateBatchResponse, _a1 error) *DataClient_CreateBatchData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DataClient_CreateBatchData_Call) RunAndReturn(run func(context.Context, *proto.CreateBatchDataRequest, ...grpc.CallOption) (*proto.CreateBatchResponse, error)) *DataClient_CreateBatchData_Call {
	_c.Call.Return(run)
	return _c
}

// CreateData provides a mock function with given fields: ctx, in, opts
func (_m *DataClient) CreateData(ctx context.Context, in *proto.CreateDataRequest, opts ...grpc.CallOption) (*proto.CreateDataResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.CreateDataResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.CreateDataRequest, ...grpc.CallOption) (*proto.CreateDataResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.CreateDataRequest, ...grpc.CallOption) *proto.CreateDataResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateDataResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.CreateDataRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DataClient_CreateData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateData'
type DataClient_CreateData_Call struct {
	*mock.Call
}

// CreateData is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.CreateDataRequest
//   - opts ...grpc.CallOption
func (_e *DataClient_Expecter) CreateData(ctx interface{}, in interface{}, opts ...interface{}) *DataClient_CreateData_Call {
	return &DataClient_CreateData_Call{Call: _e.mock.On("CreateData",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *DataClient_CreateData_Call) Run(run func(ctx context.Context, in *proto.CreateDataRequest, opts ...grpc.CallOption)) *DataClient_CreateData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.CreateDataRequest), variadicArgs...)
	})
	return _c
}

func (_c *DataClient_CreateData_Call) Return(_a0 *proto.CreateDataResponse, _a1 error) *DataClient_CreateData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DataClient_CreateData_Call) RunAndReturn(run func(context.Context, *proto.CreateDataRequest, ...grpc.CallOption) (*proto.CreateDataResponse, error)) *DataClient_CreateData_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteData provides a mock function with given fields: ctx, in, opts
func (_m *DataClient) DeleteData(ctx context.Context, in *proto.DeleteDataRequest, opts ...grpc.CallOption) (*proto.DeleteDataResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.DeleteDataResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.DeleteDataRequest, ...grpc.CallOption) (*proto.DeleteDataResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.DeleteDataRequest, ...grpc.CallOption) *proto.DeleteDataResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.DeleteDataResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.DeleteDataRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DataClient_DeleteData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteData'
type DataClient_DeleteData_Call struct {
	*mock.Call
}

// DeleteData is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.DeleteDataRequest
//   - opts ...grpc.CallOption
func (_e *DataClient_Expecter) DeleteData(ctx interface{}, in interface{}, opts ...interface{}) *DataClient_DeleteData_Call {
	return &DataClient_DeleteData_Call{Call: _e.mock.On("DeleteData",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *DataClient_DeleteData_Call) Run(run func(ctx context.Context, in *proto.DeleteDataRequest, opts ...grpc.CallOption)) *DataClient_DeleteData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.DeleteDataRequest), variadicArgs...)
	})
	return _c
}

func (_c *DataClient_DeleteData_Call) Return(_a0 *proto.DeleteDataResponse, _a1 error) *DataClient_DeleteData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DataClient_DeleteData_Call) RunAndReturn(run func(context.Context, *proto.DeleteDataRequest, ...grpc.CallOption) (*proto.DeleteDataResponse, error)) *DataClient_DeleteData_Call {
	_c.Call.Return(run)
	return _c
}

// GetContent provides a mock function with given fields: ctx, in, opts
func (_m *DataClient) GetContent(ctx context.Context, in *proto.GetContentRequest, opts ...grpc.CallOption) (*proto.GetContentResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.GetContentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetContentRequest, ...grpc.CallOption) (*proto.GetContentResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetContentRequest, ...grpc.CallOption) *proto.GetContentResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetContentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.GetContentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DataClient_GetContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContent'
type DataClient_GetContent_Call struct {
	*mock.Call
}

// GetContent is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetContentRequest
//   - opts ...grpc.CallOption
func (_e *DataClient_Expecter) GetContent(ctx interface{}, in interface{}, opts ...interface{}) *DataClient_GetContent_Call {
	return &DataClient_GetContent_Call{Call: _e.mock.On("GetContent",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *DataClient_GetContent_Call) Run(run func(ctx context.Context, in *proto.GetContentRequest, opts ...grpc.CallOption)) *DataClient_GetContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.GetContentRequest), variadicArgs...)
	})
	return _c
}

func (_c *DataClient_GetContent_Call) Return(_a0 *proto.GetContentResponse, _a1 error) *DataClient_GetContent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DataClient_GetContent_Call) RunAndReturn(run func(context.Context, *proto.GetContentRequest, ...grpc.CallOption) (*proto.GetContentResponse, error)) *DataClient_GetContent_Call {
	_c.Call.Return(run)
	return _c
}

// ListData provides a mock function with given fields: ctx, in, opts
func (_m *DataClient) ListData(ctx context.Context, in *proto.ListDataRequest, opts ...grpc.CallOption) (*proto.ListDataResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.ListDataResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.ListDataRequest, ...grpc.CallOption) (*proto.ListDataResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.ListDataRequest, ...grpc.CallOption) *proto.ListDataResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListDataResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.ListDataRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DataClient_ListData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListData'
type DataClient_ListData_Call struct {
	*mock.Call
}

// ListData is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.ListDataRequest
//   - opts ...grpc.CallOption
func (_e *DataClient_Expecter) ListData(ctx interface{}, in interface{}, opts ...interface{}) *DataClient_ListData_Call {
	return &DataClient_ListData_Call{Call: _e.mock.On("ListData",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *DataClient_ListData_Call) Run(run func(ctx context.Context, in *proto.ListDataRequest, opts ...grpc.CallOption)) *DataClient_ListData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.ListDataRequest), variadicArgs...)
	})
	return _c
}

func (_c *DataClient_ListData_Call) Return(_a0 *proto.ListDataResponse, _a1 error) *DataClient_ListData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DataClient_ListData_Call) RunAndReturn(run func(context.Context, *proto.ListDataRequest, ...grpc.CallOption) (*proto.ListDataResponse, error)) *DataClient_ListData_Call {
	_c.Call.Return(run)
	return _c
}

// SyncData provides a mock function with given fields: ctx, in, opts
func (_m *DataClient) SyncData(ctx context.Context, in *proto.SyncRequest, opts ...grpc.CallOption) (*proto.SyncResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.SyncResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.SyncRequest, ...grpc.CallOption) (*proto.SyncResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.SyncRequest, ...grpc.CallOption) *proto.SyncResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SyncResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.SyncRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DataClient_SyncData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncData'
type DataClient_SyncData_Call struct {
	*mock.Call
}

// SyncData is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.SyncRequest
//   - opts ...grpc.CallOption
func (_e *DataClient_Expecter) SyncData(ctx interface{}, in interface{}, opts ...interface{}) *DataClient_SyncData_Call {
	return &DataClient_SyncData_Call{Call: _e.mock.On("SyncData",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *DataClient_SyncData_Call) Run(run func(ctx context.Context, in *proto.SyncRequest, opts ...grpc.CallOption)) *DataClient_SyncData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.SyncRequest), variadicArgs...)
	})
	return _c
}

func (_c *DataClient_SyncData_Call) Return(_a0 *proto.SyncResponse, _a1 error) *DataClient_SyncData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DataClient_SyncData_Call) RunAndReturn(run func(context.Context, *proto.SyncRequest, ...grpc.CallOption) (*proto.SyncResponse, error)) *DataClient_SyncData_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBatchData provides a mock function with given fields: ctx, in, opts
func (_m *DataClient) UpdateBatchData(ctx context.Context, in *proto.UpdateBatchDataRequest, opts ...grpc.CallOption) (*proto.UpdateBatchResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.UpdateBatchResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.UpdateBatchDataRequest, ...grpc.CallOption) (*proto.UpdateBatchResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.UpdateBatchDataRequest, ...grpc.CallOption) *proto.UpdateBatchResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.UpdateBatchResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.UpdateBatchDataRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DataClient_UpdateBatchData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBatchData'
type DataClient_UpdateBatchData_Call struct {
	*mock.Call
}

// UpdateBatchData is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.UpdateBatchDataRequest
//   - opts ...grpc.CallOption
func (_e *DataClient_Expecter) UpdateBatchData(ctx interface{}, in interface{}, opts ...interface{}) *DataClient_UpdateBatchData_Call {
	return &DataClient_UpdateBatchData_Call{Call: _e.mock.On("UpdateBatchData",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *DataClient_UpdateBatchData_Call) Run(run func(ctx context.Context, in *proto.UpdateBatchDataRequest, opts ...grpc.CallOption)) *DataClient_UpdateBatchData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.UpdateBatchDataRequest), variadicArgs...)
	})
	return _c
}

func (_c *DataClient_UpdateBatchData_Call) Return(_a0 *proto.UpdateBatchResponse, _a1 error) *DataClient_UpdateBatchData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DataClient_UpdateBatchData_Call) RunAndReturn(run func(context.Context, *proto.UpdateBatchDataRequest, ...grpc.CallOption) (*proto.UpdateBatchResponse, error)) *DataClient_UpdateBatchData_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewDataClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewDataClient creates a new instance of DataClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDataClient(t mockConstructorTestingTNewDataClient) *DataClient {
	mock := &DataClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
