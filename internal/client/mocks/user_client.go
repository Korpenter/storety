// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	proto "github.com/Mldlr/storety/internal/proto"
)

// UserClient is an autogenerated mock type for the UserClient type
type UserClient struct {
	mock.Mock
}

type UserClient_Expecter struct {
	mock *mock.Mock
}

func (_m *UserClient) EXPECT() *UserClient_Expecter {
	return &UserClient_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, in, opts
func (_m *UserClient) CreateUser(ctx context.Context, in *proto.CreateUserRequest, opts ...grpc.CallOption) (*proto.CreateUserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.CreateUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.CreateUserRequest, ...grpc.CallOption) (*proto.CreateUserResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.CreateUserRequest, ...grpc.CallOption) *proto.CreateUserResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.CreateUserRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserClient_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UserClient_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.CreateUserRequest
//   - opts ...grpc.CallOption
func (_e *UserClient_Expecter) CreateUser(ctx interface{}, in interface{}, opts ...interface{}) *UserClient_CreateUser_Call {
	return &UserClient_CreateUser_Call{Call: _e.mock.On("CreateUser",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *UserClient_CreateUser_Call) Run(run func(ctx context.Context, in *proto.CreateUserRequest, opts ...grpc.CallOption)) *UserClient_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.CreateUserRequest), variadicArgs...)
	})
	return _c
}

func (_c *UserClient_CreateUser_Call) Return(_a0 *proto.CreateUserResponse, _a1 error) *UserClient_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserClient_CreateUser_Call) RunAndReturn(run func(context.Context, *proto.CreateUserRequest, ...grpc.CallOption) (*proto.CreateUserResponse, error)) *UserClient_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// LogInUser provides a mock function with given fields: ctx, in, opts
func (_m *UserClient) LogInUser(ctx context.Context, in *proto.LoginUserRequest, opts ...grpc.CallOption) (*proto.LoginUserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.LoginUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.LoginUserRequest, ...grpc.CallOption) (*proto.LoginUserResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.LoginUserRequest, ...grpc.CallOption) *proto.LoginUserResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.LoginUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.LoginUserRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserClient_LogInUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogInUser'
type UserClient_LogInUser_Call struct {
	*mock.Call
}

// LogInUser is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.LoginUserRequest
//   - opts ...grpc.CallOption
func (_e *UserClient_Expecter) LogInUser(ctx interface{}, in interface{}, opts ...interface{}) *UserClient_LogInUser_Call {
	return &UserClient_LogInUser_Call{Call: _e.mock.On("LogInUser",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *UserClient_LogInUser_Call) Run(run func(ctx context.Context, in *proto.LoginUserRequest, opts ...grpc.CallOption)) *UserClient_LogInUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.LoginUserRequest), variadicArgs...)
	})
	return _c
}

func (_c *UserClient_LogInUser_Call) Return(_a0 *proto.LoginUserResponse, _a1 error) *UserClient_LogInUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserClient_LogInUser_Call) RunAndReturn(run func(context.Context, *proto.LoginUserRequest, ...grpc.CallOption) (*proto.LoginUserResponse, error)) *UserClient_LogInUser_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshUserSession provides a mock function with given fields: ctx, in, opts
func (_m *UserClient) RefreshUserSession(ctx context.Context, in *proto.RefreshUserSessionRequest, opts ...grpc.CallOption) (*proto.RefreshUserSessionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.RefreshUserSessionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.RefreshUserSessionRequest, ...grpc.CallOption) (*proto.RefreshUserSessionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.RefreshUserSessionRequest, ...grpc.CallOption) *proto.RefreshUserSessionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.RefreshUserSessionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.RefreshUserSessionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserClient_RefreshUserSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshUserSession'
type UserClient_RefreshUserSession_Call struct {
	*mock.Call
}

// RefreshUserSession is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.RefreshUserSessionRequest
//   - opts ...grpc.CallOption
func (_e *UserClient_Expecter) RefreshUserSession(ctx interface{}, in interface{}, opts ...interface{}) *UserClient_RefreshUserSession_Call {
	return &UserClient_RefreshUserSession_Call{Call: _e.mock.On("RefreshUserSession",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *UserClient_RefreshUserSession_Call) Run(run func(ctx context.Context, in *proto.RefreshUserSessionRequest, opts ...grpc.CallOption)) *UserClient_RefreshUserSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.RefreshUserSessionRequest), variadicArgs...)
	})
	return _c
}

func (_c *UserClient_RefreshUserSession_Call) Return(_a0 *proto.RefreshUserSessionResponse, _a1 error) *UserClient_RefreshUserSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserClient_RefreshUserSession_Call) RunAndReturn(run func(context.Context, *proto.RefreshUserSessionRequest, ...grpc.CallOption) (*proto.RefreshUserSessionResponse, error)) *UserClient_RefreshUserSession_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewUserClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserClient creates a new instance of UserClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserClient(t mockConstructorTestingTNewUserClient) *UserClient {
	mock := &UserClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
